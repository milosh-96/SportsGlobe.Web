@{
    Layout = "_MapLayout";
}
<div id="map" style="width:auto;height:100vh;">
    Please wait for the map to load.
    <div id="cluster-preview" class="map__cluster-preview"><!--this is placeholder for cluster preview--></div>
</div>
@section Styles
{
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin="" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />
    <link rel="stylesheet" href="/css//map.css" type="text/css" />
}

@section Scripts
{
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
    <script>
        //
        let map = L.map('map', { minZoom: 2 }).setView([47.75,19.42], 4);
        
        
        document.addEventListener("DOMContentLoaded", () => {
            loadSport(2,map);
        });

        document.querySelectorAll("#sports-selector .item").forEach((el) => {
            el.addEventListener("click", (event) => {
                let sportId = event.target.dataset.sportId;
                loadSport(sportId,map);
            });
        });

        function loadSport(sportId,mapInstance) {
            // clean old layers
            mapInstance.eachLayer(function (layer) {
                if (layer) {
                    mapInstance.removeLayer(layer);
                }
            });

            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(mapInstance);

            //
            let markers = L.markerClusterGroup({ maxClusterRadius: 30 });
            // add data from the api
            let teams = fetch("/api/teams?sportId="+sportId)
                .then((response) => { return response.json(); })
                .then((data) => {
                    if (data.length > 0) {
                        data.forEach((d) => {
                            // html of popup //
                            let content = '<div><strong>' + d.name + '</strong><p>Sport: ' + d.sport.name + '</p><p>Stadium: ' + d.stadium.name + '</p></div>';
                            // create leaflet popup
                            p = new L.Popup({}).setContent(content);

                            // set icon //
                            icon = new L.Icon({
                                iconUrl: d.logoUrl + "/32",
                                iconSize: [32, 32],
                                anchor: [15, 15]
                            });
                            // add marker to the layer

                            // marker
                            let marker = L.marker([d.stadium.latitude, d.stadium.longitude], { icon: icon, title: d.name }).bindPopup(p)
                            marker.on('mouseover', function (e) {
                                this.openPopup();
                            });
                            marker.on('mouseout', function (e) {
                                this.closePopup();
                            });
                            markers.addLayer(
                                marker
                            );

                            // show preview of the cluster when mouse is over the cluster circle
                            markers.on('clustermouseover', function (e) {

                                teams = [];
                                e.layer.getAllChildMarkers().forEach((m) => { teams.push(m.options.title); });

                                clusterPreview = document.getElementById("cluster-preview");

                                // hide already opened preview before opening this one
                                clusterPreview.style.display = "none";

                                // clear the contents of the div if other previews were opened
                                clusterPreview.innerHTML = "";

                                // show the preview
                                clusterPreview.style.display = "block";

                                // set the preview's location to the cluster location
                                clusterPreview.style.left = e.containerPoint.x + 'px';
                                clusterPreview.style.top = e.containerPoint.y + 'px';

                                // init output holder
                                output = "";

                                // add each team to the output
                                teams.sort().forEach(t => { output += '<p class="map__cluster-preview-item">' + t + '</p>' });

                                clusterPreview.innerHTML = output;

                            });

                        }
                        );

                        mapInstance.panTo([data[0].stadium.latitude, data[0].stadium.longitude]);

                        // hide preview when mouse leaves the cluster circle
                        markers.on('clustermouseout', function (e) {
                            clusterPreview = document.getElementById("cluster-preview");
                            clusterPreview.style.display = "none";
                        });
                    }
                });
            mapInstance.addLayer(markers);
        }
    </script>
}